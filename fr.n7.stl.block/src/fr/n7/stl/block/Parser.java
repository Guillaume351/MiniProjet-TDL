
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.n7.stl.block;

import java_cup.runtime.*;
import fr.n7.stl.block.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.*;
import fr.n7.stl.block.ast.*;
import fr.n7.stl.block.ast.expression.*;
import fr.n7.stl.block.ast.expression.accessible.*;
import fr.n7.stl.block.ast.expression.allocation.*;
import fr.n7.stl.block.ast.expression.assignable.*;
import fr.n7.stl.block.ast.expression.value.*;
import fr.n7.stl.block.ast.instruction.*;
import fr.n7.stl.block.ast.instruction.declaration.*;
import fr.n7.stl.block.ast.scope.*;
import fr.n7.stl.block.ast.type.*;
import fr.n7.stl.block.ast.type.declaration.*;
import fr.n7.stl.util.*;
import fr.n7.stl.tam.ast.*;
import fr.n7.stl.tam.ast.impl.*;
import fr.n7.stl.block.ast.instruction.declaration.minijava.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\003\000\002\002\004\000\002\037" +
    "\003\000\002\037\004\000\002\041\011\000\002\040\010" +
    "\000\002\003\017\000\002\042\002\000\002\042\005\000" +
    "\002\043\003\000\002\043\005\000\002\045\003\000\002" +
    "\045\005\000\002\044\003\000\002\044\005\000\002\046" +
    "\002\000\002\046\004\000\002\047\002\000\002\047\004" +
    "\000\002\031\002\000\002\031\004\000\002\032\005\000" +
    "\002\032\003\000\002\033\003\000\002\025\002\000\002" +
    "\025\005\000\002\027\002\000\002\027\004\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\051\003" +
    "\000\002\051\002\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\030\004\000\002\034\005\000\002" +
    "\034\010\000\002\034\011\000\002\035\004\000\002\035" +
    "\005\000\002\035\005\000\002\035\006\000\002\035\005" +
    "\000\002\023\007\000\002\023\006\000\002\036\007\000" +
    "\002\036\006\000\002\004\005\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\017\003\000\002\017\003" +
    "\000\002\005\004\000\002\005\002\000\002\016\003\000" +
    "\002\016\005\000\002\015\006\000\002\015\004\000\002" +
    "\007\007\000\002\006\003\000\002\006\006\000\002\006" +
    "\007\000\002\006\006\000\002\006\010\000\002\006\011" +
    "\000\002\006\005\000\002\006\011\000\002\006\005\000" +
    "\002\010\005\000\002\010\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\006\000\002\022\005\000\002\022" +
    "\006\000\002\022\006\000\002\022\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\004" +
    "\000\002\021\004\000\002\021\006\000\002\021\007\000" +
    "\002\021\010\000\002\021\005\000\002\021\007\000\002" +
    "\021\005\000\002\021\006\000\002\021\006\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\007\000\002" +
    "\021\006\000\002\021\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\006\004\010\010\006\001\002\000\004\002" +
    "\347\001\002\000\006\004\010\010\006\001\002\000\004" +
    "\004\332\001\002\000\004\002\uffff\001\002\000\004\104" +
    "\012\001\002\000\004\002\001\001\002\000\006\007\014" +
    "\052\uffee\001\002\000\004\052\022\001\002\000\004\104" +
    "\016\001\002\000\006\023\020\052\uffeb\001\002\000\014" +
    "\023\uffea\046\uffea\052\uffea\054\uffea\104\uffea\001\002\000" +
    "\004\052\uffed\001\002\000\004\104\016\001\002\000\004" +
    "\052\uffec\001\002\000\012\010\023\011\026\012\024\053" +
    "\uffe9\001\002\000\026\013\uffe5\014\uffe5\015\uffe5\076\uffe5" +
    "\077\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5\104\uffe5\001" +
    "\002\000\026\013\uffe4\014\uffe4\015\uffe4\076\uffe4\077\uffe4" +
    "\100\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4\001\002\000" +
    "\026\013\034\014\033\015\037\076\050\077\044\100\045" +
    "\101\031\102\036\103\051\104\040\001\002\000\026\013" +
    "\uffe3\014\uffe3\015\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3" +
    "\102\uffe3\103\uffe3\104\uffe3\001\002\000\004\053\030\001" +
    "\002\000\006\004\ufffc\010\ufffc\001\002\000\012\046\uffcc" +
    "\047\uffcc\054\uffcc\104\uffcc\001\002\000\012\010\uffdf\011" +
    "\uffdf\012\uffdf\053\uffdf\001\002\000\020\076\050\077\044" +
    "\100\045\101\031\102\036\103\051\104\016\001\002\000" +
    "\020\076\050\077\044\100\045\101\031\102\036\103\051" +
    "\104\016\001\002\000\012\010\uffe0\011\uffe0\012\uffe0\053" +
    "\uffe0\001\002\000\012\046\uffcb\047\uffcb\054\uffcb\104\uffcb" +
    "\001\002\000\022\013\307\076\050\077\044\100\045\101" +
    "\031\102\036\103\051\104\016\001\002\000\006\046\277" +
    "\104\uffea\001\002\000\004\104\231\001\002\000\012\010" +
    "\uffde\011\uffde\012\uffde\053\uffde\001\002\000\012\010\023" +
    "\011\026\012\024\053\uffe9\001\002\000\012\046\uffce\047" +
    "\uffce\054\uffce\104\uffce\001\002\000\012\046\uffcd\047\uffcd" +
    "\054\uffcd\104\uffcd\001\002\000\010\046\uffc9\054\uffc9\104" +
    "\uffc9\001\002\000\004\052\054\001\002\000\012\046\uffcf" +
    "\047\uffcf\054\uffcf\104\uffcf\001\002\000\012\046\uffca\047" +
    "\uffca\054\uffca\104\uffca\001\002\000\010\046\uffc8\054\uffc8" +
    "\104\uffc8\001\002\000\012\010\uffd9\011\uffd9\012\uffd9\053" +
    "\uffd9\001\002\000\034\020\uffc6\046\uffc6\053\uffc6\064\uffc6" +
    "\070\uffc6\071\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102" +
    "\uffc6\103\uffc6\104\uffc6\001\002\000\034\020\066\046\061" +
    "\053\067\064\062\070\070\071\057\076\050\077\044\100" +
    "\045\101\031\102\036\103\051\104\063\001\002\000\034" +
    "\020\uffc7\046\uffc7\053\uffc7\064\uffc7\070\uffc7\071\uffc7\076" +
    "\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7" +
    "\001\002\000\034\020\076\027\071\036\106\046\105\067" +
    "\100\104\102\105\072\106\103\107\104\110\077\111\075" +
    "\112\074\113\073\001\002\000\034\020\uffc0\046\uffc0\053" +
    "\uffc0\064\uffc0\070\uffc0\071\uffc0\076\uffc0\077\uffc0\100\uffc0" +
    "\101\uffc0\102\uffc0\103\uffc0\104\uffc0\001\002\000\024\020" +
    "\245\046\061\076\050\077\044\100\045\101\031\102\036" +
    "\103\051\104\246\001\002\000\004\046\237\001\002\000" +
    "\012\024\uffb5\030\uffb5\054\uffb5\104\uffea\001\002\000\004" +
    "\104\231\001\002\000\010\024\214\030\212\054\213\001" +
    "\002\000\012\024\uffb4\030\uffb4\046\204\054\uffb4\001\002" +
    "\000\044\010\uffd0\011\uffd0\012\uffd0\020\uffd0\046\uffd0\053" +
    "\uffd0\064\uffd0\065\uffd0\070\uffd0\071\uffd0\076\uffd0\077\uffd0" +
    "\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\001\002\000" +
    "\034\020\076\027\071\036\106\046\105\067\100\104\102" +
    "\105\072\106\103\107\104\110\077\111\075\112\074\113" +
    "\073\001\002\000\034\020\076\027\071\036\106\046\105" +
    "\067\100\104\102\105\072\106\103\107\104\110\077\111" +
    "\075\112\074\113\073\001\002\000\054\022\uff8f\023\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\035\uff8f\036\uff8f\040\uff8f\041" +
    "\uff8f\042\uff8f\044\uff8f\045\uff8f\047\uff8f\054\uff8f\055\uff8f" +
    "\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\001" +
    "\002\000\054\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94" +
    "\035\uff94\036\uff94\040\uff94\041\uff94\042\uff94\044\uff94\045" +
    "\uff94\047\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94" +
    "\061\uff94\062\uff94\063\uff94\001\002\000\054\022\uff95\023" +
    "\uff95\024\uff95\025\uff95\026\uff95\035\uff95\036\uff95\040\uff95" +
    "\041\uff95\042\uff95\044\uff95\045\uff95\047\uff95\054\uff95\055" +
    "\uff95\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95" +
    "\001\002\000\054\022\uff92\023\uff92\024\uff92\025\uff92\026" +
    "\uff92\035\uff92\036\uff92\040\uff92\041\uff92\042\uff92\044\uff92" +
    "\045\uff92\047\uff92\054\uff92\055\uff92\056\uff92\057\uff92\060" +
    "\uff92\061\uff92\062\uff92\063\uff92\001\002\000\054\022\uff93" +
    "\023\uff93\024\uff93\025\uff93\026\uff93\035\uff93\036\uff93\040" +
    "\uff93\041\uff93\042\uff93\044\uff93\045\uff93\047\uff93\054\uff93" +
    "\055\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063" +
    "\uff93\001\002\000\054\022\uff91\023\uff91\024\uff91\025\uff91" +
    "\026\uff91\035\uff91\036\uff91\040\uff91\041\uff91\042\uff91\044" +
    "\uff91\045\uff91\047\uff91\054\uff91\055\uff91\056\uff91\057\uff91" +
    "\060\uff91\061\uff91\062\uff91\063\uff91\001\002\000\020\076" +
    "\050\077\044\100\045\101\031\102\036\103\051\104\016" +
    "\001\002\000\044\022\172\024\121\026\125\035\112\036" +
    "\126\040\123\041\115\042\117\044\110\045\111\054\114" +
    "\056\120\057\127\060\122\061\124\062\113\063\116\001" +
    "\002\000\054\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97" +
    "\035\uff97\036\uff97\040\uff97\041\uff97\042\uff97\044\uff97\045" +
    "\uff97\047\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97" +
    "\061\uff97\062\uff97\063\uff97\001\002\000\054\022\uff90\023" +
    "\uff90\024\uff90\025\uff90\026\uff90\035\uff90\036\uff90\040\uff90" +
    "\041\uff90\042\uff90\044\uff90\045\uff90\047\uff90\054\uff90\055" +
    "\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90" +
    "\001\002\000\054\022\uff96\023\uff96\024\uff96\025\uff96\026" +
    "\uff96\035\uff96\036\uff96\040\uff96\041\uff96\042\uff96\044\uff96" +
    "\045\uff96\047\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060" +
    "\uff96\061\uff96\062\uff96\063\uff96\001\002\000\050\020\076" +
    "\027\071\036\106\046\105\067\100\076\050\077\044\100" +
    "\045\101\031\102\036\103\051\104\162\105\072\106\103" +
    "\107\104\110\077\111\075\112\074\113\073\001\002\000" +
    "\034\020\076\027\071\036\106\046\105\067\100\104\102" +
    "\105\072\106\103\107\104\110\077\111\075\112\074\113" +
    "\073\001\002\000\054\022\uffa1\023\uffa1\024\121\025\uffa1" +
    "\026\uffa1\035\uffa1\036\uffa1\040\123\041\115\042\117\044" +
    "\uffa1\045\uffa1\047\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\060\uffa1\061\uffa1\062\uffa1\063\uffa1\001\002\000\034\020" +
    "\076\027\071\036\106\046\105\067\100\104\102\105\072" +
    "\106\103\107\104\110\077\111\075\112\074\113\073\001" +
    "\002\000\034\020\076\027\071\036\106\046\105\067\100" +
    "\104\102\105\072\106\103\107\104\110\077\111\075\112" +
    "\074\113\073\001\002\000\034\020\076\027\071\036\106" +
    "\046\105\067\100\104\102\105\072\106\103\107\104\110" +
    "\077\111\075\112\074\113\073\001\002\000\034\020\076" +
    "\027\071\036\106\046\105\067\100\104\102\105\072\106" +
    "\103\107\104\110\077\111\075\112\074\113\073\001\002" +
    "\000\034\020\076\027\071\036\106\046\105\067\100\104" +
    "\102\105\072\106\103\107\104\110\077\111\075\112\074" +
    "\113\073\001\002\000\034\020\076\027\071\036\106\046" +
    "\105\067\100\104\102\105\072\106\103\107\104\110\077" +
    "\111\075\112\074\113\073\001\002\000\034\020\076\027" +
    "\071\036\106\046\105\067\100\104\102\105\072\106\103" +
    "\107\104\110\077\111\075\112\074\113\073\001\002\000" +
    "\034\020\076\027\071\036\106\046\105\067\100\104\102" +
    "\105\072\106\103\107\104\110\077\111\075\112\074\113" +
    "\073\001\002\000\034\020\076\027\071\036\106\046\105" +
    "\067\100\104\102\105\072\106\103\107\104\110\077\111" +
    "\075\112\074\113\073\001\002\000\004\104\140\001\002" +
    "\000\034\020\076\027\071\036\106\046\105\067\100\104" +
    "\102\105\072\106\103\107\104\110\077\111\075\112\074" +
    "\113\073\001\002\000\034\020\076\027\071\036\106\046" +
    "\105\067\100\104\102\105\072\106\103\107\104\110\077" +
    "\111\075\112\074\113\073\001\002\000\034\020\076\027" +
    "\071\036\106\046\105\067\100\104\102\105\072\106\103" +
    "\107\104\110\077\111\075\112\074\113\073\001\002\000" +
    "\034\020\076\027\071\036\106\046\105\067\100\104\102" +
    "\105\072\106\103\107\104\110\077\111\075\112\074\113" +
    "\073\001\002\000\034\020\076\027\071\036\106\046\105" +
    "\067\100\104\102\105\072\106\103\107\104\110\077\111" +
    "\075\112\074\113\073\001\002\000\034\020\076\027\071" +
    "\036\106\046\105\067\100\104\102\105\072\106\103\107" +
    "\104\110\077\111\075\112\074\113\073\001\002\000\044" +
    "\022\uffab\023\uffab\024\121\025\uffab\026\uffab\035\112\036" +
    "\126\040\123\041\115\042\117\044\uffab\045\uffab\047\uffab" +
    "\054\uffab\055\uffab\062\uffab\063\uffab\001\002\000\054\022" +
    "\uffa5\023\uffa5\024\121\025\uffa5\026\uffa5\035\uffa5\036\uffa5" +
    "\040\123\041\115\042\117\044\uffa5\045\uffa5\047\uffa5\054" +
    "\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5" +
    "\063\uffa5\001\002\000\044\024\121\025\133\026\125\035" +
    "\112\036\126\040\123\041\115\042\117\044\110\045\111" +
    "\054\114\056\120\057\127\060\122\061\124\062\113\063" +
    "\116\001\002\000\034\020\076\027\071\036\106\046\105" +
    "\067\100\104\102\105\072\106\103\107\104\110\077\111" +
    "\075\112\074\113\073\001\002\000\052\022\uff9b\023\uff9b" +
    "\024\121\025\uff9b\035\112\036\126\040\123\041\115\042" +
    "\117\044\110\045\111\047\uff9b\054\uff9b\055\uff9b\056\120" +
    "\057\127\060\122\061\124\062\113\063\116\001\002\000" +
    "\044\022\uffa9\023\uffa9\024\121\025\uffa9\026\uffa9\035\112" +
    "\036\126\040\123\041\115\042\117\044\uffa9\045\uffa9\047" +
    "\uffa9\054\uffa9\055\uffa9\062\uffa9\063\uffa9\001\002\000\054" +
    "\022\uffa4\023\uffa4\024\121\025\uffa4\026\uffa4\035\uffa4\036" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\044\uffa4\045\uffa4\047\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\001\002\000\044\022\uffaa\023\uffaa\024\121" +
    "\025\uffaa\026\uffaa\035\112\036\126\040\123\041\115\042" +
    "\117\044\uffaa\045\uffaa\047\uffaa\054\uffaa\055\uffaa\062\uffaa" +
    "\063\uffaa\001\002\000\056\022\uff9c\023\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\035\uff9c\036\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\044\uff9c\045\uff9c\046\141\047\uff9c\054\uff9c\055\uff9c\056" +
    "\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\001\002" +
    "\000\036\020\076\027\071\036\106\046\105\047\142\067" +
    "\100\104\102\105\072\106\103\107\104\110\077\111\075" +
    "\112\074\113\073\001\002\000\054\022\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\035\uff9e\036\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\044\uff9e\045\uff9e\047\uff9e\054\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\001\002" +
    "\000\046\023\uffb6\024\121\026\125\035\112\036\126\040" +
    "\123\041\115\042\117\044\110\045\111\047\uffb6\054\114" +
    "\056\120\057\127\060\122\061\124\062\113\063\116\001" +
    "\002\000\006\023\145\047\146\001\002\000\034\020\076" +
    "\027\071\036\106\046\105\067\100\104\102\105\072\106" +
    "\103\107\104\110\077\111\075\112\074\113\073\001\002" +
    "\000\054\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\035" +
    "\uff9d\036\uff9d\040\uff9d\041\uff9d\042\uff9d\044\uff9d\045\uff9d" +
    "\047\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\001\002\000\046\023\uffb7\024\121" +
    "\026\125\035\112\036\126\040\123\041\115\042\117\044" +
    "\110\045\111\047\uffb7\054\114\056\120\057\127\060\122" +
    "\061\124\062\113\063\116\001\002\000\044\022\uffac\023" +
    "\uffac\024\121\025\uffac\026\uffac\035\112\036\126\040\123" +
    "\041\115\042\117\044\uffac\045\uffac\047\uffac\054\uffac\055" +
    "\uffac\062\uffac\063\uffac\001\002\000\054\022\uffa2\023\uffa2" +
    "\024\121\025\uffa2\026\uffa2\035\uffa2\036\uffa2\040\uffa2\041" +
    "\uffa2\042\uffa2\044\uffa2\045\uffa2\047\uffa2\054\uffa2\055\uffa2" +
    "\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\001" +
    "\002\000\050\022\uffad\023\uffad\024\121\025\uffad\026\uffad" +
    "\035\112\036\126\040\123\041\115\042\117\044\uffad\045" +
    "\uffad\047\uffad\054\uffad\055\uffad\056\120\057\127\060\122" +
    "\061\124\001\002\000\054\022\uffa3\023\uffa3\024\121\025" +
    "\uffa3\026\uffa3\035\uffa3\036\uffa3\040\uffa3\041\uffa3\042\uffa3" +
    "\044\uffa3\045\uffa3\047\uffa3\054\uffa3\055\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\001\002\000\044" +
    "\024\121\026\125\035\112\036\126\040\123\041\115\042" +
    "\117\044\110\045\111\054\114\055\155\056\120\057\127" +
    "\060\122\061\124\062\113\063\116\001\002\000\054\022" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\035\uff9f\036\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\044\uff9f\045\uff9f\047\uff9f\054" +
    "\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\063\uff9f\001\002\000\050\022\uffae\023\uffae\024\121\025" +
    "\uffae\026\uffae\035\112\036\126\040\123\041\115\042\117" +
    "\044\uffae\045\uffae\047\uffae\054\uffae\055\uffae\056\120\057" +
    "\127\060\122\061\124\001\002\000\054\022\uffa6\023\uffa6" +
    "\024\121\025\uffa6\026\uffa6\035\uffa6\036\uffa6\040\123\041" +
    "\115\042\117\044\uffa6\045\uffa6\047\uffa6\054\uffa6\055\uffa6" +
    "\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\001" +
    "\002\000\054\022\uffa7\023\uffa7\024\121\025\uffa7\026\uffa7" +
    "\035\112\036\126\040\123\041\115\042\117\044\uffa7\045" +
    "\uffa7\047\uffa7\054\uffa7\055\uffa7\056\120\057\127\060\122" +
    "\061\124\062\113\063\116\001\002\000\054\022\uffa8\023" +
    "\uffa8\024\121\025\uffa8\026\uffa8\035\112\036\126\040\123" +
    "\041\115\042\117\044\uffa8\045\111\047\uffa8\054\uffa8\055" +
    "\uffa8\056\120\057\127\060\122\061\124\062\113\063\116" +
    "\001\002\000\044\024\uff97\026\uff97\035\uff97\036\uff97\040" +
    "\uff97\041\uff97\042\uff97\044\uff97\045\uff97\047\170\054\uff97" +
    "\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97\001" +
    "\002\000\004\047\166\001\002\000\044\024\121\026\125" +
    "\035\112\036\126\040\123\041\115\042\117\044\110\045" +
    "\111\047\165\054\114\056\120\057\127\060\122\061\124" +
    "\062\113\063\116\001\002\000\054\022\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\035\uff9a\036\uff9a\040\uff9a\041\uff9a" +
    "\042\uff9a\044\uff9a\045\uff9a\047\uff9a\054\uff9a\055\uff9a\056" +
    "\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\001\002" +
    "\000\034\020\076\027\071\036\106\046\105\067\100\104" +
    "\102\105\072\106\103\107\104\110\077\111\075\112\074" +
    "\113\073\001\002\000\054\022\uff98\023\uff98\024\121\025" +
    "\uff98\026\125\035\112\036\126\040\123\041\115\042\117" +
    "\044\110\045\111\047\uff98\054\uff98\055\uff98\056\120\057" +
    "\127\060\122\061\124\062\113\063\116\001\002\000\034" +
    "\020\076\027\071\036\106\046\105\067\100\104\102\105" +
    "\072\106\103\107\104\110\077\111\075\112\074\113\073" +
    "\001\002\000\054\022\uff99\023\uff99\024\121\025\uff99\026" +
    "\125\035\112\036\126\040\123\041\115\042\117\044\110" +
    "\045\111\047\uff99\054\uff99\055\uff99\056\120\057\127\060" +
    "\122\061\124\062\113\063\116\001\002\000\034\020\uffba" +
    "\046\uffba\053\uffba\064\uffba\070\uffba\071\uffba\076\uffba\077" +
    "\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba\001\002" +
    "\000\006\046\175\054\174\001\002\000\034\020\076\027" +
    "\071\036\106\046\105\067\100\104\102\105\072\106\103" +
    "\107\104\110\077\111\075\112\074\113\073\001\002\000" +
    "\036\020\076\027\071\036\106\046\105\047\176\067\100" +
    "\104\102\105\072\106\103\107\104\110\077\111\075\112" +
    "\074\113\073\001\002\000\054\022\uff8d\023\uff8d\024\uff8d" +
    "\025\uff8d\026\uff8d\035\uff8d\036\uff8d\040\uff8d\041\uff8d\042" +
    "\uff8d\044\uff8d\045\uff8d\047\uff8d\054\uff8d\055\uff8d\056\uff8d" +
    "\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\001\002\000" +
    "\006\023\145\047\200\001\002\000\054\022\uff8c\023\uff8c" +
    "\024\uff8c\025\uff8c\026\uff8c\035\uff8c\036\uff8c\040\uff8c\041" +
    "\uff8c\042\uff8c\044\uff8c\045\uff8c\047\uff8c\054\uff8c\055\uff8c" +
    "\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\001" +
    "\002\000\044\024\121\026\125\035\112\036\126\040\123" +
    "\041\115\042\117\044\110\045\111\054\114\055\202\056" +
    "\120\057\127\060\122\061\124\062\113\063\116\001\002" +
    "\000\054\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\035" +
    "\uff8e\036\uff8e\040\uff8e\041\uff8e\042\uff8e\044\uff8e\045\uff8e" +
    "\047\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061" +
    "\uff8e\062\uff8e\063\uff8e\001\002\000\054\022\uffa0\023\uffa0" +
    "\024\121\025\uffa0\026\uffa0\035\uffa0\036\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\044\uffa0\045\uffa0\047\uffa0\054\uffa0\055\uffa0" +
    "\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\001" +
    "\002\000\036\020\076\027\071\036\106\046\105\047\205" +
    "\067\100\104\102\105\072\106\103\107\104\110\077\111" +
    "\075\112\074\113\073\001\002\000\004\022\211\001\002" +
    "\000\006\023\145\047\207\001\002\000\004\022\210\001" +
    "\002\000\034\020\uffbe\046\uffbe\053\uffbe\064\uffbe\070\uffbe" +
    "\071\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103" +
    "\uffbe\104\uffbe\001\002\000\034\020\uffbd\046\uffbd\053\uffbd" +
    "\064\uffbd\070\uffbd\071\uffbd\076\uffbd\077\uffbd\100\uffbd\101" +
    "\uffbd\102\uffbd\103\uffbd\104\uffbd\001\002\000\034\020\076" +
    "\027\071\036\106\046\105\067\100\104\102\105\072\106" +
    "\103\107\104\110\077\111\075\112\074\113\073\001\002" +
    "\000\034\020\076\027\071\036\106\046\105\067\100\104" +
    "\102\105\072\106\103\107\104\110\077\111\075\112\074" +
    "\113\073\001\002\000\004\104\215\001\002\000\012\024" +
    "\uffaf\030\uffaf\046\216\054\uffaf\001\002\000\036\020\076" +
    "\027\071\036\106\046\105\047\217\067\100\104\102\105" +
    "\072\106\103\107\104\110\077\111\075\112\074\113\073" +
    "\001\002\000\004\022\223\001\002\000\006\023\145\047" +
    "\221\001\002\000\004\022\222\001\002\000\034\020\uffbb" +
    "\046\uffbb\053\uffbb\064\uffbb\070\uffbb\071\uffbb\076\uffbb\077" +
    "\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\001\002" +
    "\000\034\020\uffbc\046\uffbc\053\uffbc\064\uffbc\070\uffbc\071" +
    "\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc" +
    "\104\uffbc\001\002\000\044\024\121\026\125\035\112\036" +
    "\126\040\123\041\115\042\117\044\110\045\111\054\114" +
    "\055\225\056\120\057\127\060\122\061\124\062\113\063" +
    "\116\001\002\000\012\024\uffb3\030\uffb3\047\uffb3\054\uffb3" +
    "\001\002\000\044\022\227\024\121\026\125\035\112\036" +
    "\126\040\123\041\115\042\117\044\110\045\111\054\114" +
    "\056\120\057\127\060\122\061\124\062\113\063\116\001" +
    "\002\000\034\020\uffbf\046\uffbf\053\uffbf\064\uffbf\070\uffbf" +
    "\071\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103" +
    "\uffbf\104\uffbf\001\002\000\006\030\232\054\233\001\002" +
    "\000\016\022\uffc5\023\uffc5\030\uffc5\046\uffc5\047\uffc5\054" +
    "\uffc5\001\002\000\034\020\076\027\071\036\106\046\105" +
    "\067\100\104\102\105\072\106\103\107\104\110\077\111" +
    "\075\112\074\113\073\001\002\000\004\055\234\001\002" +
    "\000\016\022\uffc4\023\uffc4\030\uffc4\046\uffc4\047\uffc4\054" +
    "\uffc4\001\002\000\044\022\236\024\121\026\125\035\112" +
    "\036\126\040\123\041\115\042\117\044\110\045\111\054" +
    "\114\056\120\057\127\060\122\061\124\062\113\063\116" +
    "\001\002\000\034\020\uffc1\046\uffc1\053\uffc1\064\uffc1\070" +
    "\uffc1\071\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1" +
    "\103\uffc1\104\uffc1\001\002\000\034\020\076\027\071\036" +
    "\106\046\105\067\100\104\102\105\072\106\103\107\104" +
    "\110\077\111\075\112\074\113\073\001\002\000\044\024" +
    "\121\026\125\035\112\036\126\040\123\041\115\042\117" +
    "\044\110\045\111\047\241\054\114\056\120\057\127\060" +
    "\122\061\124\062\113\063\116\001\002\000\004\052\054" +
    "\001\002\000\004\065\243\001\002\000\004\052\054\001" +
    "\002\000\034\020\uffb9\046\uffb9\053\uffb9\064\uffb9\070\uffb9" +
    "\071\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103" +
    "\uffb9\104\uffb9\001\002\000\012\024\uffb4\030\uffb4\047\uffb4" +
    "\054\uffb4\001\002\000\010\024\uffb5\047\257\054\uffb5\001" +
    "\002\000\010\024\254\047\256\054\213\001\002\000\004" +
    "\047\251\001\002\000\010\020\245\046\061\104\252\001" +
    "\002\000\012\024\uffb5\030\uffb5\047\uffb5\054\uffb5\001\002" +
    "\000\012\024\254\030\uffb0\047\uffb0\054\uffb0\001\002\000" +
    "\004\104\255\001\002\000\012\024\uffaf\030\uffaf\047\uffaf" +
    "\054\uffaf\001\002\000\012\024\uffb2\030\uffb2\047\uffb2\054" +
    "\uffb2\001\002\000\010\020\245\046\061\104\252\001\002" +
    "\000\012\024\254\030\uffb1\047\uffb1\054\uffb1\001\002\000" +
    "\044\022\262\024\121\026\125\035\112\036\126\040\123" +
    "\041\115\042\117\044\110\045\111\054\114\056\120\057" +
    "\127\060\122\061\124\062\113\063\116\001\002\000\034" +
    "\020\uffb8\046\uffb8\053\uffb8\064\uffb8\070\uffb8\071\uffb8\076" +
    "\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8" +
    "\001\002\000\004\053\uffe8\001\002\000\010\022\265\046" +
    "\266\054\233\001\002\000\012\010\uffdc\011\uffdc\012\uffdc" +
    "\053\uffdc\001\002\000\022\047\270\076\050\077\044\100" +
    "\045\101\031\102\036\103\051\104\016\001\002\000\004" +
    "\104\231\001\002\000\006\022\uffd3\052\uffd3\001\002\000" +
    "\006\023\272\047\273\001\002\000\020\076\050\077\044" +
    "\100\045\101\031\102\036\103\051\104\016\001\002\000" +
    "\006\022\uffd4\052\uffd4\001\002\000\004\104\231\001\002" +
    "\000\010\023\uffc3\047\uffc3\054\233\001\002\000\010\023" +
    "\uffc2\047\uffc2\054\233\001\002\000\022\047\300\076\050" +
    "\077\044\100\045\101\031\102\036\103\051\104\016\001" +
    "\002\000\004\052\054\001\002\000\006\023\272\047\302" +
    "\001\002\000\004\052\054\001\002\000\012\010\uffd2\011" +
    "\uffd2\012\uffd2\053\uffd2\001\002\000\012\010\uffd1\011\uffd1" +
    "\012\uffd1\053\uffd1\001\002\000\004\104\231\001\002\000" +
    "\004\052\054\001\002\000\020\076\050\077\044\100\045" +
    "\101\031\102\036\103\051\104\016\001\002\000\004\104" +
    "\231\001\002\000\004\052\054\001\002\000\012\010\uffd6" +
    "\011\uffd6\012\uffd6\053\uffd6\001\002\000\010\030\314\046" +
    "\266\054\233\001\002\000\034\020\076\027\071\036\106" +
    "\046\105\067\100\104\102\105\072\106\103\107\104\110" +
    "\077\111\075\112\074\113\073\001\002\000\044\022\316" +
    "\024\121\026\125\035\112\036\126\040\123\041\115\042" +
    "\117\044\110\045\111\054\114\056\120\057\127\060\122" +
    "\061\124\062\113\063\116\001\002\000\012\010\uffda\011" +
    "\uffda\012\uffda\053\uffda\001\002\000\012\010\uffd7\011\uffd7" +
    "\012\uffd7\053\uffd7\001\002\000\010\030\321\046\266\054" +
    "\233\001\002\000\034\020\076\027\071\036\106\046\105" +
    "\067\100\104\102\105\072\106\103\107\104\110\077\111" +
    "\075\112\074\113\073\001\002\000\044\022\323\024\121" +
    "\026\125\035\112\036\126\040\123\041\115\042\117\044" +
    "\110\045\111\054\114\056\120\057\127\060\122\061\124" +
    "\062\113\063\116\001\002\000\012\010\uffdb\011\uffdb\012" +
    "\uffdb\053\uffdb\001\002\000\004\104\231\001\002\000\004" +
    "\052\054\001\002\000\012\010\uffd8\011\uffd8\012\uffd8\053" +
    "\uffd8\001\002\000\006\046\266\054\233\001\002\000\004" +
    "\022\331\001\002\000\012\010\uffd5\011\uffd5\012\uffd5\053" +
    "\uffd5\001\002\000\004\016\333\001\002\000\004\052\334" +
    "\001\002\000\004\010\335\001\002\000\004\015\336\001" +
    "\002\000\004\103\337\001\002\000\004\017\340\001\002" +
    "\000\004\046\341\001\002\000\020\076\050\077\044\100" +
    "\045\101\031\102\036\103\051\104\016\001\002\000\006" +
    "\023\272\047\343\001\002\000\004\052\054\001\002\000" +
    "\004\053\345\001\002\000\004\002\ufffb\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\012\002\003\003\006\037\010\040\004\001" +
    "\001\000\002\001\001\000\010\003\006\037\345\040\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\012\001\001\000\002" +
    "\001\001\000\006\032\016\033\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\020" +
    "\033\014\001\001\000\002\001\001\000\006\024\024\025" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\017\040\020\045\023\046\026\042\033\051\034\034\035" +
    "\031\036\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\323\020\045\023\327\033\051\001\001\000\012" +
    "\017\323\020\045\023\324\033\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\304\020\045\023\305" +
    "\033\051\001\001\000\002\001\001\000\004\016\263\001" +
    "\001\000\002\001\001\000\006\024\024\025\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\054\001" +
    "\001\000\016\006\055\007\057\017\063\020\045\022\064" +
    "\033\051\001\001\000\002\001\001\000\004\021\260\001" +
    "\001\000\002\001\001\000\006\020\247\022\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\100\001\001\000\004\021\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\172\020\045\033\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\162\021\163\001\001\000\004\021\106\001\001\000\002" +
    "\001\001\000\004\021\160\001\001\000\004\021\157\001" +
    "\001\000\004\021\156\001\001\000\004\021\155\001\001" +
    "\000\004\021\153\001\001\000\004\021\152\001\001\000" +
    "\004\021\151\001\001\000\004\021\150\001\001\000\004" +
    "\021\147\001\001\000\002\001\001\000\004\021\136\001" +
    "\001\000\004\021\135\001\001\000\004\021\134\001\001" +
    "\000\004\021\131\001\001\000\004\021\130\001\001\000" +
    "\004\021\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\143\021\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\166\001\001\000\002\001\001" +
    "\000\004\021\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\200\001\001\000\006" +
    "\010\176\021\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\205\021\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\225\001\001\000" +
    "\004\021\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\217\021\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\237" +
    "\001\001\000\002\001\001\000\004\004\241\001\001\000" +
    "\002\001\001\000\004\004\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\270\017\266" +
    "\020\045\033\051\001\001\000\004\016\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\273\020\045" +
    "\033\051\001\001\000\002\001\001\000\004\016\274\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\300" +
    "\017\266\020\045\033\051\001\001\000\004\004\303\001" +
    "\001\000\002\001\001\000\004\004\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\317\001\001\000" +
    "\004\004\316\001\001\000\012\017\307\020\045\023\310" +
    "\033\051\001\001\000\004\016\312\001\001\000\004\004" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\326\001" +
    "\001\000\004\004\325\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\341\017\266\020\045\033\051\001\001\000\002" +
    "\001\001\000\004\004\343\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File(this.name);
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  }
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

	protected Lexer lexer;
	protected String name;
	public Parser(String _name) {
		this();
		this.name = _name;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Elements 
            {
              ProgramDeclaration RESULT =null;
		Location programxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location programxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ProgramDeclaration program = (ProgramDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3

			SymbolTable globalScope = new SymbolTable();
			if (! program.collect(globalScope)) {
				Logger.error("Collect failed");
			}
			if (! program.resolve(globalScope)) {
				Logger.error("Resolve failed");
			}
			if (! program.checkType()) {
				Logger.error("Checktype failed");
			}
			TAMFactory tamFactory = new TAMFactoryImpl();
			Fragment fragment = program.getCode(tamFactory);
			fragment.add(tamFactory.createHalt());
			System.out.println(fragment);
			RESULT = program;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ProgramDeclaration start_val = (ProgramDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Elements ::= Main 
            {
              ProgramDeclaration RESULT =null;
		Location mainxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mainxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block main = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4

			RESULT = new ProgramDeclaration(main);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elements",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Elements ::= Class Elements 
            {
              ProgramDeclaration RESULT =null;
		Location clsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location clsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ClassDeclaration cls = (ClassDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location elementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ProgramDeclaration elements = (ProgramDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5

			elements.add(cls);
			RESULT = elements;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elements",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Interface ::= UL_Interface UL_Identificateur Generics MultipleInherits UL_Accolade_Ouvrante InterfaceElements UL_Accolade_Fermante 
            {
              Object RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location inheritsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location inheritsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object inherits = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location elementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location elementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<InterfaceElement> elements = (List<InterfaceElement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG6

		    RESULT = new InterfaceDeclaration(nom, elements);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Interface",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Class ::= UL_Classe UL_Identificateur Implements UL_Accolade_Ouvrante ClassElements UL_Accolade_Fermante 
            {
              ClassDeclaration RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location interfacesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location interfacesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<String> interfaces = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location elementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location elementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ClassElement> elements = (List<ClassElement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG7

		    RESULT = new ClassDeclaration(nom, null, elements);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Class",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Main ::= UL_Public UL_Classe UL_Classe_Principale UL_Accolade_Ouvrante UL_Public UL_De_Classe UL_Type_Vide UL_Methode_Principale UL_Parenthese_Ouvrante Parameters UL_Parenthese_Fermante Block UL_Accolade_Fermante 
            {
              Block RESULT =null;
		Location blocxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blocxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Block bloc = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG8

		 	RESULT = bloc;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Generics ::= 
            {
              Object RESULT =null;
		//@@CUPDBG9

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Generics",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Generics ::= UL_Inferieur TypeParameters UL_Superieur 
            {
              Object RESULT =null;
		//@@CUPDBG10

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Generics",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TypeParameter ::= UL_Identificateur 
            {
              Object RESULT =null;
		//@@CUPDBG11

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeParameter",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TypeParameter ::= UL_Identificateur UL_Herite Constraints 
            {
              Object RESULT =null;
		//@@CUPDBG12

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeParameter",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Constraints ::= Instance 
            {
              Object RESULT =null;
		//@@CUPDBG13

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constraints",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Constraints ::= Instance UL_Esperluette Constraints 
            {
              Object RESULT =null;
		//@@CUPDBG14

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constraints",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeParameters ::= TypeParameter 
            {
              Object RESULT =null;
		//@@CUPDBG15

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeParameters",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TypeParameters ::= TypeParameter UL_Virgule TypeParameters 
            {
              Object RESULT =null;
		//@@CUPDBG16

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeParameters",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SingleInherits ::= 
            {
              Object RESULT =null;
		//@@CUPDBG17

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SingleInherits",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SingleInherits ::= UL_Herite Instance 
            {
              Object RESULT =null;
		//@@CUPDBG18

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SingleInherits",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MultipleInherits ::= 
            {
              Object RESULT =null;
		//@@CUPDBG19

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultipleInherits",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MultipleInherits ::= UL_Herite Instances 
            {
              Object RESULT =null;
		//@@CUPDBG20

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultipleInherits",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Implements ::= 
            {
              List<String> RESULT =null;
		//@@CUPDBG21

		    RESULT = new LinkedList<String>();
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Implements",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Implements ::= UL_Realise Instances 
            {
              List<String> RESULT =null;
		Location instancesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location instancesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<String> instances = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22

		    RESULT = instances;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Implements",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Instances ::= Instance UL_Virgule Instances 
            {
              List<String> RESULT =null;
		Location instancexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location instancexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String instance = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location instancesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location instancesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<String> instances = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23

		    instances.add(instance);
		    RESULT = instances;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instances",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Instances ::= Instance 
            {
              List<String> RESULT =null;
		Location instancexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location instancexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String instance = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24

		    List<String> instances = new LinkedList<String>();
		    instances.add(instance);
		    RESULT = instances;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instances",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Instance ::= UL_Identificateur 
            {
              String RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25

			RESULT = nom;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instance",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassElements ::= 
            {
              List<ClassElement> RESULT =null;
		//@@CUPDBG26

		    List<ClassElement> liste = new LinkedList<ClassElement>();
		    RESULT = liste;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElements",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassElements ::= AccessRight ClassElement ClassElements 
            {
              List<ClassElement> RESULT =null;
		Location accessxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location accessxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		AccessRight access = (AccessRight)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location elementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location elementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ClassElement element = (ClassElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location restexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location restexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ClassElement> reste = (List<ClassElement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27

		    element.setAccessRight(access);
		    reste.add((ClassElement) element);
		    RESULT = reste;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElements",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // InterfaceElements ::= 
            {
              List<InterfaceElement> RESULT =null;
		//@@CUPDBG28

		    List<InterfaceElement> elements = new LinkedList<InterfaceElement>();
		    RESULT = elements;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceElements",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // InterfaceElements ::= InterfaceElement InterfaceElements 
            {
              List<InterfaceElement> RESULT =null;
		Location elementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location elementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		InterfaceElement element = (InterfaceElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location restexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location restexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<InterfaceElement> reste = (List<InterfaceElement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG29

		     reste.add(element);
		     RESULT = reste;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceElements",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AccessRight ::= UL_Public 
            {
              AccessRight RESULT =null;
		//@@CUPDBG30

		    RESULT = AccessRight.PUBLIC;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessRight",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AccessRight ::= UL_Protege 
            {
              AccessRight RESULT =null;
		//@@CUPDBG31

		    RESULT = AccessRight.PROTECTED;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessRight",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AccessRight ::= UL_Prive 
            {
              AccessRight RESULT =null;
		//@@CUPDBG32

		    RESULT = AccessRight.PRIVATE;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessRight",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ElementNature ::= UL_De_Classe 
            {
              Object RESULT =null;
		//@@CUPDBG33

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementNature",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ElementNature ::= 
            {
              Object RESULT =null;
		//@@CUPDBG34

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementNature",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassElement ::= Attribute 
            {
              ClassElement RESULT =null;
		Location attributexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location attributexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ClassElement attribute = (ClassElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG35

		    RESULT = attribute;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassElement ::= Method 
            {
              ClassElement RESULT =null;
		Location methodxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location methodxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ClassElement method = (ClassElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG36

		    RESULT = method;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassElement ::= Constructor 
            {
              ClassElement RESULT =null;
		Location constructorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location constructorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ClassElement constructor = (ClassElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37

		    RESULT = constructor;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // InterfaceElement ::= Signature UL_Point_Virgule 
            {
              InterfaceElement RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Signature entete = (Signature)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG38

		    RESULT = new InterfaceElement(entete);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceElement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Attribute ::= Type Identifiant UL_Point_Virgule 
            {
              ClassElement RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG39

           Type _type = identifiant.getRight();
            if (_type == null) {
                _type = type;
            } else {
                _type = ((PartialType)_type).complete( type );
            }
		    RESULT = new AttributeDeclarationElement(identifiant.getLeft(), _type, false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Attribute",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Attribute ::= UL_De_Classe Type Identifiant UL_Egal Expression UL_Point_Virgule 
            {
              ClassElement RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG40

		    RESULT = new AttributeDeclarationElement(identifiant.getLeft(), valeur, type, false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Attribute",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Attribute ::= UL_De_Classe UL_Definitif Type Identifiant UL_Egal Expression UL_Point_Virgule 
            {
              ClassElement RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG41

		    RESULT = new AttributeDeclarationElement(identifiant.getLeft(), valeur, type, true);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Attribute",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Method ::= Signature Block 
            {
              ClassElement RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Signature entete = (Signature)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG42

		    RESULT = new MethodDeclarationElement(entete, false, false, false, corps);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Method ::= UL_Definitif Signature Block 
            {
              ClassElement RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Signature entete = (Signature)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG43

		    RESULT = new MethodDeclarationElement(entete, true, false, false, corps);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Method ::= UL_De_Classe Signature Block 
            {
              ClassElement RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Signature entete = (Signature)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44

		    RESULT = new MethodDeclarationElement(entete, false, true, false, corps);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Method ::= UL_De_Classe UL_Definitif Signature Block 
            {
              ClassElement RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Signature entete = (Signature)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG45

		    RESULT = new MethodDeclarationElement(entete, true, true, false, corps);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Method ::= UL_Abstrait Signature UL_Point_Virgule 
            {
              ClassElement RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Signature entete = (Signature)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG46

		    RESULT = new MethodDeclarationElement(entete, false, false, true, null);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Signature ::= Type Identifiant UL_Parenthese_Ouvrante Parameters UL_Parenthese_Fermante 
            {
              Signature RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ParameterDeclaration> parametres = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG47

            Type _type = identifiant.getRight();
            if (_type == null) {
                _type = type;
            } else {
                _type = ((PartialType)_type).complete( type );
            }
            RESULT = new Signature(identifiant.getLeft(), identifiant.getRight(), parametres);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Signature ::= Type Identifiant UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Signature RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG48

            Type _type = identifiant.getRight();
            if (_type == null) {
                _type = type;
            } else {
                _type = ((PartialType)_type).complete( type );
            }
            List<ParameterDeclaration> _parametres = new LinkedList<ParameterDeclaration>();

		    RESULT = new Signature(identifiant.getLeft(), type, _parametres);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Constructor ::= UL_Identificateur UL_Parenthese_Ouvrante Parameters UL_Parenthese_Fermante Block 
            {
              ClassElement RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ParameterDeclaration> parametres = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG49

		    RESULT = new ConstructorDeclarationElement(nom, parametres, block);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constructor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Constructor ::= UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante Block 
            {
              ClassElement RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG50

		    RESULT = new ConstructorDeclarationElement(nom, null, block);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constructor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Block ::= UL_Accolade_Ouvrante Instructions UL_Accolade_Fermante 
            {
              Block RESULT =null;
		Location instructionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location instructionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG51

				RESULT = new Block( instructions );
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Atomique ::= UL_Type_Booleen 
            {
              Type RESULT =null;
		//@@CUPDBG52

				RESULT = AtomicType.BooleanType;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Atomique ::= UL_Type_Caractere 
            {
              Type RESULT =null;
		//@@CUPDBG53

				RESULT = AtomicType.CharacterType;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Atomique ::= UL_Type_Chaine 
            {
              Type RESULT =null;
		//@@CUPDBG54

				RESULT = AtomicType.StringType;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Atomique ::= UL_Type_Entier 
            {
              Type RESULT =null;
		//@@CUPDBG55

				RESULT = AtomicType.IntegerType;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Atomique ::= UL_Type_Flottant 
            {
              Type RESULT =null;
		//@@CUPDBG56

				RESULT = AtomicType.FloatingType;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Atomique ::= UL_Type_Vide 
            {
              Type RESULT =null;
		//@@CUPDBG57

				RESULT = AtomicType.VoidType;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Type ::= Atomique 
            {
              Type RESULT =null;
		Location atomiquexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location atomiquexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type atomique = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG58

				RESULT = atomique;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Type ::= Instance 
            {
              Type RESULT =null;
		Location instancexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location instancexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String instance = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG59

				RESULT = new ClassType(instance);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Instructions ::= Instructions Instruction 
            {
              List<Instruction> RESULT =null;
		Location instructionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location instructionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location instructionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location instructionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG60

					instructions.add( instruction );
					RESULT = instructions;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instructions",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Instructions ::= 
            {
              List<Instruction> RESULT =null;
		//@@CUPDBG61
 RESULT = new LinkedList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instructions",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Identifiant ::= UL_Identificateur 
            {
              Pair<String,PartialType> RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG62

					RESULT = new Pair<String,PartialType>( nom, null );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifiant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Identifiant ::= Identifiant UL_Crochet_Ouvrant UL_Crochet_Fermant 
            {
              Pair<String,PartialType> RESULT =null;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG63

					if (identifiant.getRight() == null) {
						identifiant.setRight( new PartialArrayType() );
					} else {
						identifiant.getRight().enrich(new PartialArrayType());
					}
					RESULT = identifiant;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifiant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Parameters ::= Parameters UL_Virgule Type Identifiant 
            {
              List<ParameterDeclaration> RESULT =null;
		Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG64

					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = parameters;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Parameters ::= Type Identifiant 
            {
              List<ParameterDeclaration> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG65

					List<ParameterDeclaration> _parameters = new LinkedList<ParameterDeclaration>();
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					_parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = _parameters;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Declaration ::= Type Identifiant UL_Egal Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG66

					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					RESULT = new VariableDeclaration( identifiant.getLeft(), _type, valeur);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Instruction ::= Declaration 
            {
              Instruction RESULT =null;
		Location declarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Instruction declaration = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG67

					RESULT = declaration;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Instruction ::= Affectable UL_Egal Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG68

					RESULT = new Assignment( affectable, expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Instruction ::= UL_Moi UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG69

					RESULT = new ConstructorCall(parametres);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Instruction ::= UL_Moi UL_Parenthese_Ouvrante UL_Parenthese_Fermante UL_Point_Virgule 
            {
              Instruction RESULT =null;
		//@@CUPDBG70

					RESULT = new ConstructorCall(new ArrayList<>());
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Instruction ::= Affectable UL_Point UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		AssignableExpression expression = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG71

					RESULT = new MethodAccess(expression, etiquette, new ArrayList<>(), true);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Instruction ::= Affectable UL_Point UL_Identificateur UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		AssignableExpression expression = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG72

					RESULT = new MethodAccess(expression, etiquette, parametres, true);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Instruction ::= UL_Afficher Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG73

					RESULT = new Printer( expression );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Instruction ::= UL_Si UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Block UL_Sinon Block 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Block alors = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sinonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sinonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block sinon = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG74

					RESULT = new Conditional( condition, alors, sinon);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Instruction ::= UL_Retour Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG75

					RESULT = new Return( expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expressions ::= Expressions UL_Virgule Expression 
            {
              List<Expression> RESULT =null;
		Location expressionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expressionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Expression> expressions = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG76

					expressions.add( expression );
					RESULT = expressions;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expressions ::= Expression 
            {
              List<Expression> RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG77

					List<Expression> _expressions = new LinkedList<Expression>();
					_expressions.add( expression );
					RESULT = _expressions;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Affectable ::= UL_Identificateur 
            {
              AssignableExpression RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG78

					RESULT = new VariableAssignment( nom );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Affectable ::= UL_Moi 
            {
              AssignableExpression RESULT =null;
		//@@CUPDBG79

					RESULT = new ThisValue();
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Affectable ::= Affectable UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              AssignableExpression RESULT =null;
		Location tableauxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tableauxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		AssignableExpression tableau = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location indicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location indicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression indice = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG80

					RESULT = new ArrayAssignment( tableau, indice);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Affectable ::= UL_Parenthese_Ouvrante Affectable UL_Parenthese_Fermante 
            {
              AssignableExpression RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG81

					RESULT = affectable;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Affectable ::= UL_Parenthese_Ouvrante UL_Identificateur UL_Parenthese_Fermante Affectable 
            {
              AssignableExpression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG82

					RESULT = new AssignableConversion( affectable, type);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Affectable ::= UL_Parenthese_Ouvrante Atomique UL_Parenthese_Fermante Affectable 
            {
              AssignableExpression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG83

					RESULT = new AssignableConversion( affectable, type);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Affectable ::= Affectable UL_Point UL_Identificateur 
            {
              AssignableExpression RESULT =null;
		Location enregistrementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location enregistrementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		AssignableExpression enregistrement = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG84

					RESULT = new FieldAssignment( enregistrement, etiquette);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expression ::= Expression UL_Double_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG85

					RESULT = new BinaryExpression( gauche, BinaryOperator.Equals, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expression ::= Expression UL_Exclamation_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG86

					RESULT = new BinaryExpression( gauche, BinaryOperator.Different, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expression ::= Expression UL_Inferieur Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG87

					RESULT = new BinaryExpression( gauche, BinaryOperator.Lesser, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expression ::= Expression UL_Superieur Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG88

					RESULT = new BinaryExpression( gauche, BinaryOperator.Greater, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expression ::= Expression UL_Inferieur_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG89

					RESULT = new BinaryExpression( gauche, BinaryOperator.LesserOrEqual, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expression ::= Expression UL_Superieur_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG90

					RESULT = new BinaryExpression( gauche, BinaryOperator.GreaterOrEqual, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expression ::= Expression UL_Double_Barre Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG91

					RESULT = new BinaryExpression( gauche, BinaryOperator.Or, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expression ::= Expression UL_Double_Esperluette Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG92

					RESULT = new BinaryExpression( gauche, BinaryOperator.And, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expression ::= Expression UL_Plus Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG93

					RESULT = new BinaryExpression( gauche, BinaryOperator.Add, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expression ::= Expression UL_Moins Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG94

					RESULT = new BinaryExpression( gauche, BinaryOperator.Substract, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expression ::= Expression UL_Asterisque Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG95

					RESULT = new BinaryExpression( gauche, BinaryOperator.Multiply, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expression ::= Expression UL_Oblique Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG96

					RESULT = new BinaryExpression( gauche, BinaryOperator.Divide, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expression ::= Expression UL_Pour_Cent Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG97

					RESULT = new BinaryExpression( gauche, BinaryOperator.Modulo, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expression ::= UL_Moins Expression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG98

					RESULT = new UnaryExpression( UnaryOperator.Opposite, expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expression ::= UL_Point_Exclamation Expression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG99

					RESULT = new UnaryExpression( UnaryOperator.Negate, expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expression ::= Expression UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location indicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location indicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression indice = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG100

					RESULT = new ArrayAccess( expression, indice );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expression ::= Expression UL_Point UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG101

					RESULT = new MethodAccess( expression, etiquette, new ArrayList<>());
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expression ::= Expression UL_Point UL_Identificateur UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG102

					RESULT = new MethodAccess( expression, etiquette, parametres );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expression ::= Expression UL_Point UL_Identificateur 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG103

					RESULT = new PropertyAccess( expression, etiquette );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expression ::= Expression UL_Point_Interrogation Expression UL_Deux_Points Expression 
            {
              Expression RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression alors = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sinonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sinonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression sinon = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG104

					RESULT = new ConditionalExpression( condition, alors, sinon);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expression ::= UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG105

					RESULT = expression;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expression ::= UL_Parenthese_Ouvrante UL_Identificateur UL_Parenthese_Fermante Expression 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG106

					RESULT = new AccessibleConversion( expression, type);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expression ::= UL_Parenthese_Ouvrante Atomique UL_Parenthese_Fermante Expression 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG107

					RESULT = new AccessibleConversion( expression, type);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expression ::= UL_Identificateur 
            {
              Expression RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG108

					RESULT = new IdentifierAccess( nom );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expression ::= UL_Nombre_Entier 
            {
              Expression RESULT =null;
		Location entierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location entierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String entier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG109

					RESULT = new IntegerValue( entier );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expression ::= UL_Vrai 
            {
              Expression RESULT =null;
		//@@CUPDBG110

					RESULT = BooleanValue.True;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expression ::= UL_Faux 
            {
              Expression RESULT =null;
		//@@CUPDBG111

					RESULT = BooleanValue.False;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Expression ::= UL_Moi 
            {
              Expression RESULT =null;
		//@@CUPDBG112

					RESULT = new ThisValue();
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expression ::= UL_Nul 
            {
              Expression RESULT =null;
		//@@CUPDBG113

					RESULT = NullValue.Null;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Expression ::= UL_Nombre_Flottant 
            {
              Expression RESULT =null;
		Location flottantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location flottantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String flottant = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG114

					RESULT = new FloatingValue( flottant );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Expression ::= UL_Caractere 
            {
              Expression RESULT =null;
		Location caracterexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location caracterexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String caractere = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG115

					RESULT = new CharacterValue( caractere );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Expression ::= UL_Chaine 
            {
              Expression RESULT =null;
		Location chainexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location chainexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String chaine = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG116

					RESULT = new StringValue( chaine );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Expression ::= UL_Nouveau Type UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location taillexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location taillexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression taille = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG117

					RESULT = new ArrayAllocation( type, taille );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expression ::= UL_Nouveau Type UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG118

					RESULT = new ClassInstanciation( type, new ArrayList<Expression>() );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Expression ::= UL_Nouveau Type UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG119

					RESULT = new ClassInstanciation( type, parametres );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
